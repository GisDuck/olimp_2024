#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>

class Sudoku {
private:
    bool _is_sudoku_unsolved;
    std::vector<std::vector<int>> _field;
    std::map<std::pair<int, int>, std::set<int>> _empty_cells;
    std::pair<int, int> _min_cell;
    std::map<int, std::vector<int>> _coord_blocks;

public:
    Sudoku(const std::vector<std::vector<int>>& field) : _field(field), _is_sudoku_unsolved(false), _min_cell(9, 9) {
        _empty_cells.insert({{9, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}});
        if (field.size() == 4) {
            _coord_blocks = {{0, {0, 1}},
                             {1, {2, 3}}};
        } else {
            _coord_blocks = {{0, {0, 1, 2}},
                             {1, {3, 4, 5}},
                             {2, {6, 7, 8}}};
        }
    }

    void search_alone() {
        int x = 0;
        int y = 0;
        while (x != _field.size()) {
            while (y != _field.size()) {
                if (_field[x][y] == 0) {
                    std::set<int> possible_nums;
                    for (int num = 1; num <= _field.size(); ++num) {
                        possible_nums.insert(num);
                    }
                    for (int num : _field[x]) {
                        possible_nums.erase(num);
                    }
                    for (int i = 0; i < _field.size(); ++i) {
                        possible_nums.erase(_field[i][y]);
                    }
                    int len_crd_blks = _coord_blocks.size();
                    for (int z : _coord_blocks[x / len_crd_blks]) {
                        for (int f : _coord_blocks[y / len_crd_blks]) {
                            possible_nums.erase(_field[z][f]);
                        }
                    }
                    if (possible_nums.size() == 1) {
                        _field[x][y] = *possible_nums.begin();
                        _empty_cells.clear();
                        _empty_cells.insert({{9, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}});
                        _min_cell = {9, 9};
                        x = 0;
                        y = -1;
                    } else if (possible_nums.empty()) {
                        _is_sudoku_unsolved = true;
                        return;
                    } else {
                        _empty_cells[{x, y}] = possible_nums;
                        if (_empty_cells[{x, y}].size() < _empty_cells[_min_cell].size()) {
                            _min_cell = {x, y};
                        }
                    }
                }
                y++;
            }
            y = 0;
            x++;
        }
    }

    std::vector<std::vector<int>> solve_sudoku() {
        search_alone();
        if (_is_sudoku_unsolved) {
            return {};
        }
        if (_empty_cells.size() == 1) {
            return _field;
        }
        bool is_need = true;
        while (is_need) {
            is_need = false;
            if (_empty_cells[_min_cell].empty()) {
                return {};
            }
            int cell = *_empty_cells[_min_cell].begin();
            _empty_cells[_min_cell].erase(cell);
            std::vector<std::vector<int>> field = _field;
            field[_min_cell.first][_min_cell.second] = cell;
            Sudoku new_sudoku(field);
            std::vector<std::vector<int>> out = new_sudoku.solve_sudoku();
            if (out.empty()) {
                is_need = true;
            } else {
                return out;
            }
        }
        return {};
    }
};

int main() {
    int grid;
    std::cin >> grid;
    if (grid == 4 || grid == 9) {
        std::vector<std::vector<int>> field(grid, std::vector<int>(grid));
        for (int i = 0; i < grid; ++i) {
            for (int j = 0; j < grid; ++j) {
                std::cin >> field[i][j];
            }
        }
        Sudoku sudoku(field);
        std::vector<std::vector<int>> out = sudoku.solve_sudoku();
        for (const auto& line : out) {
            for (auto it = line.begin(); it != line.end(); ++it) {
                std::cout << *it;
                if (it != line.end() - 1) {
                    std::cout << ' ';
                }
            }
            std::cout << '\n';
        }
    } else {
        std::cout << "Invalid field" << std::endl;
    }
    return 0;
}
